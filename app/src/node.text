打包
Android Studio3.0 flavorDimensions多维度理解(版本差异化打包)
https://blog.csdn.net/chen_xi_hao/article/details/80526049

对比几个风味维度的BuildConfig文件里的这个FLAVOR_NAME常量，会发现总是显示第一维度company的值，
而第二维度channel的值并不存在，所以当产生多维度的产品时，定义的一些常量总是以第一维度的配置为准

guava教程
https://ifeve.com/google-guava/

dagger2笔记
https://www.jianshu.com/p/24af4c102f62
http://codethink.me
http://codethink.me/2015/08/06/dependency-injection-with-dagger-2/
http://codethink.me/2015/08/01/dependency-injection-theory/
https://juejin.im/post/58722866128fe1006b33e104
https://proandroiddev.com/dagger-2-on-android-the-official-guidelines-you-should-be-following-2607fd6c002e
https://www.jianshu.com/p/1d84ba23f4d2
https://cloud.tencent.com/developer/article/1040872
https://segmentfault.com/a/1190000016755867
https://segmentfault.com/a/1190000015797080

YouTube 视频地址
dagger2
https://www.youtube.com/watch?v=2Vnt39V0taQ

http://haibin.me/2016/08/15/Android%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97-%E5%B8%95%E5%85%8B%E8%83%96%E6%B0%B4%E7%85%AEDagger2/
https://v.youku.com/v_show/id_XMTY5MTgyOTEwMA==.html?refer=shipinyunPC_operation.liuliling_bofangqi_1244000_fQZ7Fj_18101900

app启动优化
http://blog.udinic.com/2015/09/15/speed-up-your-app/

dagger初始化

public class MyApplication extends DaggerApplication {

    @Override
    protected AndroidInjector<? extends DaggerApplication> applicationInjector() {
        return DaggerAppComponent.builder().application(this).build();
    }

}

@Singleton
@Component(modules = {AndroidSupportInjectionModule.class})
public interface AppComponent extends AndroidInjector<MyApplication> {

    @Component.Builder
    interface Builder {

        @BindsInstance
        AppComponent.Builder application(Application application);

        AppComponent build();
    }
}

从MyApplication类开始探索。在这里AppComponent会被创建和存储。这意味着所有单例的对象的生命周期都会与Applicaiton一致
AppComponent的实现由Dagger 2（对象可以通过builder模式被创建）生成的代码提供。在这里我们也可以放入所有的Component的依赖（module和其他components）

buildTypes {
    debug {
        minifyEnabled false
        applicationIdSuffix ".debug"
    }
    custom.initWith(buildTypes.debug)
    custom {
        applicationIdSuffix ".custom"
        versionNameSuffix "-customs"
    }
}

对默认的debug构建类型进行了修改，关闭了混淆配置，添加applicationId后缀
以debug为基础创建一个叫custom的构建类型（相当于继承了debug版本），在custom的构建类型中修改applicationId后缀，并添加了versionName的后缀

创建一个新的BuildType的步骤为：

在buildTypes容器下添加一个自定义名称的元素
调用initWith或者使用闭包进行配置点击查看BuildType的可配置属性

对于每一个BuildType，Android plugin都会创建对应的“assembleBuildTypeName”任务
对于每一个BuildType，都可以在dependencies容器中添加名为BuildTypeNameCompile的依赖配置

对于每一个BuildType，Android plugin都会创建一个对应的sourceSet，默认位置为：src/BuildTypeName
所以新建BuildType的名字不能是main、androidTest和test这三个已经被用的名字
BuildType的代码/资源会以以下方式进行合并

manifest会被合并到app的manifest文件中
res目录下的资源文件会替换main里的资源文件
java目录下的文件会被添加到main里的java目录中，所以不能和main里的类重名（含包名）

//不同的productFlavors 依赖不同
mockImplementation "com.hjq:xxpermissions:$rootProject.xxpermissionsVersion"
mockImplementation files('libs/MiPush_SDK_Client_3_6_2.jar')

prodImplementation "com.google.zxing:core:$rootProject.zxingCoreVersion"
prodImplementation files('libs/zbar.jar')

资料
https://www.jianshu.com/p/cce65d1352c1
https://www.jianshu.com/p/98ee75dd49f4
http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html


一、依赖倒置原则
A. 高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。
B. 抽象不应该依赖于具体实现，具体实现应该依赖于抽象。

既然了解了依赖倒置原则，那么这里就再说一点，为什么MVP模式中，View需要使用接口，而Presenter则不需要，或者说没有必要？
根据依赖倒置原则，高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象
MVP中，Presenter属于高层次模块，而View是低层次，所以View就需要实现接口了，就是这么简单……








