打包
Android Studio3.0 flavorDimensions多维度理解(版本差异化打包)
https://blog.csdn.net/chen_xi_hao/article/details/80526049

对比几个风味维度的BuildConfig文件里的这个FLAVOR_NAME常量，会发现总是显示第一维度company的值，
而第二维度channel的值并不存在，所以当产生多维度的产品时，定义的一些常量总是以第一维度的配置为准

guava教程
https://ifeve.com/google-guava/

dagger2笔记
https://www.jianshu.com/p/24af4c102f62

YouTube 视频地址
dagger2
https://www.youtube.com/watch?v=2Vnt39V0taQ

http://haibin.me/2016/08/15/Android%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97-%E5%B8%95%E5%85%8B%E8%83%96%E6%B0%B4%E7%85%AEDagger2/
https://v.youku.com/v_show/id_XMTY5MTgyOTEwMA==.html?refer=shipinyunPC_operation.liuliling_bofangqi_1244000_fQZ7Fj_18101900

app启动优化
http://blog.udinic.com/2015/09/15/speed-up-your-app/

dagger初始化

public class MyApplication extends DaggerApplication {

    @Override
    protected AndroidInjector<? extends DaggerApplication> applicationInjector() {
        return DaggerAppComponent.builder().application(this).build();
    }

}

@Singleton
@Component(modules = {AndroidSupportInjectionModule.class})
public interface AppComponent extends AndroidInjector<MyApplication> {

    @Component.Builder
    interface Builder {

        @BindsInstance
        AppComponent.Builder application(Application application);

        AppComponent build();
    }
}

从MyApplication类开始探索。在这里AppComponent会被创建和存储。这意味着所有单例的对象的生命周期都会与Applicaiton一致
AppComponent的实现由Dagger 2（对象可以通过builder模式被创建）生成的代码提供。在这里我们也可以放入所有的Component的依赖（module和其他components）

















